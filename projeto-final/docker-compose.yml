version: '3.5'
name: 'fazenda-vertical'

networks:
  api_network:
  db_network:
  rabbit_network:

services:
  socket_server:
    build:
      context: ./socket/server
    restart: on-failure
    networks:
      - api_network
    environment:
      PORT: 3155
    ports:
    - "3155:3155"

  dispositivo_1:
    build:
      context: ./dispositivos
      dockerfile: Dockerfile.sensor
    env_file: ./dispositivos/sensor.env
    restart: on-failure
    environment:
      SENSOR_QUEUE: ${FILA_ESTANTE}
      CATEGORIA_ID: 1
      CATEGORIA_NOME: 'Temperatura'
      CATEGORIA_MEDIDA: 'ºC'
      INTERVAL_SECONDS: 5
      DISPOSITIVO_ID: 1
      POSICAO_VERTICAL: 1
      POSICAO_HORIZONTAL: 1
    networks:
      - rabbit_network
#
  dispositivo_2:
    build:
      context: ./dispositivos
      dockerfile: Dockerfile.sensor
    env_file: ./dispositivos/sensor.env
    restart: on-failure
    environment:
      DISPOSITIVO_ID: 2
      SENSOR_QUEUE: ${FILA_ESTANTE}
      INTERVAL_SECONDS: 4
      CATEGORIA_ID: 2
      CATEGORIA_NOME: 'Umidade do Ar'
      CATEGORIA_MEDIDA: '%'
      POSICAO_VERTICAL: 1
      POSICAO_HORIZONTAL: 1
    networks:
      - rabbit_network
#
  dispositivo_3:
    build:
      context: ./dispositivos
      dockerfile: Dockerfile.sensor
    env_file: ./dispositivos/sensor.env
    restart: on-failure
    environment:
      DISPOSITIVO_ID: 3
      SENSOR_QUEUE: ${FILA_ESTANTE}
      INTERVAL_SECONDS: 5
      CATEGORIA_ID: 3
      CATEGORIA_NOME: 'Umidade do Solo'
      CATEGORIA_MEDIDA: '%'
      POSICAO_VERTICAL: 1
      POSICAO_HORIZONTAL: 1
    networks:
      - rabbit_network
#
  dispositivo_4:
    build:
      context: ./dispositivos
      dockerfile: Dockerfile.sensor
    env_file: ./dispositivos/sensor.env
    restart: on-failure
    environment:
      DISPOSITIVO_ID: 4
      SENSOR_QUEUE: ${FILA_ESTANTE}
      INTERVAL_SECONDS: 6
      CATEGORIA_ID: 1
      CATEGORIA_NOME: 'Temperatura'
      CATEGORIA_MEDIDA: 'ºC'
      POSICAO_VERTICAL: 2
      POSICAO_HORIZONTAL: 1
    networks:
      - rabbit_network
#
  rabbit:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: fila-soo
      RABBITMQ_DEFAULT_PASS: Grupo05SOO
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - rabbit_network
    restart: on-failure
    volumes:
      - ./volumes/rabbit:/var/lib/rabbitmq/mnesia

  api:
    build:
      context: ./api
    networks:
      - api_network
      - db_network
      - rabbit_network
    restart: on-failure
    ports:
      - '8080:8080'
    environment:
      SPRING_DATASOURCE_URL: 'jdbc:mysql://database:3306/fazenda-vertical'
      RABBITMQ_HOST: rabbit
      RABBITMQ_QUEUE: estante-1

  database:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'fazenda-vertical'
      MYSQL_USER: 'mysql-soo'
      MYSQL_PASSWORD: 'Grupo05@SOO'
      MYSQL_ROOT_PASSWORD: '1@#!R00T0(*&'
    ports:
      - '3306:3306'
    networks:
      - db_network
    volumes:
      - ./volumes/mysql:/var/lib/mysql

  frontend:
    build:
      context: front-end
    networks:
      - api_network
    ports:
      - '3000:3000'
